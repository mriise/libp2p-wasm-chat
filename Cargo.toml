[package]
name = "rusty-gossip-pad"
version = "0.1.0"
authors = ["mriise <me@mriise.net>"]
edition = "2021"
build = "build.rs"

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["console_error_panic_hook"]

[dependencies]
wasm-bindgen = "0.2.80"

# wasm-rs-async-executor = { version = "0.9.0" }
wasm-rs-dbg = "0.1.2"
tokio = { version = "1.17.0", features = ["macros", "sync"] }
wasm-bindgen-futures = { version = "0.4.30"}

web-sys = { version = "0.3.57", features = ["HtmlFormElement"] }
js-sys = "0.3.57"
gloo = { version = "0.7.0", features = ["futures"] }

futures = "0.3.21"
futures-util = "0.3.21"


libp2p = { path = "../rust-libp2p", version = "0.47.0", default-features = false, features = ["wasm-bindgen", "mplex", "noise", "identify", "yamux", "ping", "floodsub", "wasm-ext", "wasm-ext-websocket", "gossipsub"] }
# libp2p-webrtc = { version = "0.3.0", path = "../libp2p-webrtc/libp2p-webrtc" }
# libp2p gossipsub is restricted under the unknonwn OS flag, so it must be imported directly, wasmtimer instant is also broken so direct from local
# libp2p-gossipsub = {version = "0.40.0", path = "../rust-libp2p/protocols/gossipsub" }

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.7", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
# wee_alloc = { version = "0.4.5", optional = true }
rlsf = "0.1.2"

[dev-dependencies]
wasm-bindgen-test = "0.3.30"

[build-dependencies]
cargo_toml = "0.11.5"

[profile.release]
# Tell `rustc` to optimize for small code size.
lto = true
opt-level = "s"
